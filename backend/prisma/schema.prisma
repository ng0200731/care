// Care Label Layout System Database Schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User model with role-based access
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String
  role      String   @default("USER") // "ADMIN" or "USER"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  masterFiles MasterFile[]
  suppliers   Supplier[]
  orders      Order[]

  @@map("users")
}

// Master File model - stores the coordinate viewer data
model MasterFile {
  id          String   @id @default(cuid())
  name        String
  description String?
  data        String   // Stores the complete coordinate viewer JSON data as string
  width       Float?   // Canvas width in mm
  height      Float?   // Canvas height in mm
  canvasImage String?  // SVG image of the canvas design
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders Order[]

  @@map("master_files")
}

// Supplier model
model Supplier {
  id          String   @id @default(cuid())
  name        String
  contactInfo String   // JSON string for contact details
  capabilities String? // JSON string for supplier capabilities, pricing, etc.
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders Order[]

  @@map("suppliers")
}

// Order model
model Order {
  id          String   @id @default(cuid())
  orderNumber String   @unique @default(cuid())
  status      String   @default("DRAFT") // "DRAFT", "SENT", "CONFIRMED", "IN_PRODUCTION", "DELIVERED", "CANCELLED"
  quantity    Int
  notes       String?
  orderData   String?  // JSON string for additional order specifications
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId       String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  masterFileId String
  masterFile   MasterFile @relation(fields: [masterFileId], references: [id], onDelete: Cascade)
  supplierId   String
  supplier     Supplier   @relation(fields: [supplierId], references: [id], onDelete: Cascade)

  @@map("orders")
}
